{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to build a LSTM-based Neural Machine Translation model with fairseq\n",
    "\n",
    "[Xiaoou Wang](https://xiaoouwang.github.io)\n",
    "\n",
    "Neural Machine Translation (NMT) is often an end-to-end pipeline requiring less code and training time compared to Statistical Machine Translation (SMT). Two open-source libraries are often used in this domain: `opennmt` and `fairseq`. In this tutorial, we will see how to quickly train a NMT model using LSTM, a type of RNN capable of retaining more information on long range dependencies.\n",
    "\n",
    "It should be noted that NMT uses often a sequence to sequence model (Seq2Seq), meaning that it takes a sequence of words as inputs, encodes them (encoder) and outputs another sequence of words (decoder). However, the length of the inputs and outputs in NMT needs not to be the same, contrary to tasks like part-of-speech tagging.\n",
    "\n",
    "## RNN, typical use (before attention) and major downside\n",
    "\n",
    "We mentioned that LSTM was a type of RNN. One of the main drawbacks of the traditional way of using RNN in Seq2Seq (in our case both the encoder and the decoder use LSTMs) is that the encoder transforms a sentence into a single vector (the last hidden state) regardless of the sentence's length. The state-of-the-art uses the transformer architecture that we will introduce later in another article."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data preparation\n",
    "\n",
    "In machine translation, one would typically have a parallel text corpus (also called bitexts) in the following fashion:\n",
    "\n",
    "`Let's try something.\\tPermíteme intentarlo.`\n",
    "\n",
    "The `\\t` is the tab separator. Then the whole corpus is separated into two files containing each some monolingual texts. Each text is then filtered to remove sentences containing errors (too long or not good translation) and tokenized (since most models take words as inputs). Then the two separatef files are transformed into a binary format to faciliate training, which can be easily done in `fairseq`.\n",
    "\n",
    "The `--thresholdtgt` and `--thresholdsrc` options map words appearing less than threshold times to unknown.\n",
    "\n",
    "```bash\n",
    "fairseq-preprocess \\\n",
    "--source-lang es \\\n",
    "--target-lang en \\\n",
    "--trainpref data/tatoeba.eng_spa.train.tok \\\n",
    "--validpref data/tatoeba.eng_spa.valid.tok \\\n",
    "--testpref data/tatoeba.eng_spa.test.tok \\\n",
    "--destdir data/mt-bin \\\n",
    "--thresholdsrc 3 \\\n",
    "--thresholdtgt 3\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please note that it's important to specify source and target language because these informations are contained in the filenames. See the structure of the data folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[01;34m./data\u001b[00m\n",
      "├── tatoeba.eng_spa.test.tok.en\n",
      "├── tatoeba.eng_spa.test.tok.es\n",
      "├── tatoeba.eng_spa.train.tok.en\n",
      "├── tatoeba.eng_spa.train.tok.es\n",
      "├── tatoeba.eng_spa.valid.tok.en\n",
      "└── tatoeba.eng_spa.valid.tok.es\n",
      "\n",
      "0 directories, 6 files\n"
     ]
    }
   ],
   "source": [
    "!tree ./data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's see the files created by the preprocessing script. Notice the files ended by `.bin` meaning that it's a binary format and the two dict files containing all the English/Spanish words in the corpus and their IDs. The two dict files contain 11412 English words and 16828 Spanish words for 200,000 bitext sentences, which is rather expected because there are more verb forms/types in Spanish (conjugation in Spanish is richer)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[01;34m./data/mt-bin\u001b[00m\n",
      "├── dict.en.txt\n",
      "├── dict.es.txt\n",
      "├── preprocess.log\n",
      "├── test.es-en.en.bin\n",
      "├── test.es-en.en.idx\n",
      "├── test.es-en.es.bin\n",
      "├── test.es-en.es.idx\n",
      "├── train.es-en.en.bin\n",
      "├── train.es-en.en.idx\n",
      "├── train.es-en.es.bin\n",
      "├── train.es-en.es.idx\n",
      "├── valid.es-en.en.bin\n",
      "├── valid.es-en.en.idx\n",
      "├── valid.es-en.es.bin\n",
      "└── valid.es-en.es.idx\n",
      "\n",
      "0 directories, 15 files\n",
      ". 136457\n",
      "I 43210\n",
      "the 36227\n",
      "to 34736\n",
      "a 25625\n",
      "   11412 ./data/mt-bin/dict.en.txt\n",
      "   16828 ./data/mt-bin/dict.es.txt\n"
     ]
    }
   ],
   "source": [
    "#!bash preprocess.sh\n",
    "!tree ./data/mt-bin\n",
    "!head -n 5 ./data/mt-bin/dict.en.txt\n",
    "!wc -l ./data/mt-bin/dict.en.txt\n",
    "!wc -l ./data/mt-bin/dict.es.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training\n",
    "\n",
    "Let's kick-start the training process. It's easy to see from the bash script that we use lstm (default embedding size is 512) as building units, together with the use of adam optimizer and a learning rate of 1.0e-3. `max-tokens` defines the number of tokens loaded on a single batch.The choice of hyperparameters is a tricky engineering problem better tackled using `tensorflow`, see for example [https://github.com/tensorflow/tensor2tensor#translation](https://github.com/tensorflow/tensor2tensor#translation). In this tutorial, we will use some random values. Also note the `save-dir` option specifying the output path for models. The training would continue infinitely and each time an epoch ends, the checkpoint (model's parameters) is saved in `data/mt-cp`. Also, after each epoch, the loss is automatically calculated on the train and val. Whenever you pressed `Ctrl-C`, the training is stopped. The number of epochs you wait until `Ctrl-C` is called **patience**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fairseq-train \\\n",
      "data/mt-bin \\\n",
      "--arch lstm \\\n",
      "--share-decoder-input-output-embed \\\n",
      "--optimizer adam \\\n",
      "--lr 1.0e-3 \\\n",
      "--max-tokens 4096 \\\n",
      "--save-dir data/mt-cp"
     ]
    }
   ],
   "source": [
    "!cat train.sh\n",
    "#!bash train.sh"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the curve of training and validation loss. This U-shaped curve is very common and the usual practice is to stop the training when validation loss starts to rise (`early stopping`).\n",
    "\n",
    "![](img/machine_translation/2022-03-06-22-45-24.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since training NMT models is very computer-intensive and time-consuming without GPU. I only trained for two epochs on my own machine, resulting in the following folder structure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[01;34m./data/mt-pt/\u001b[00m\n",
      "├── checkpoint1.pt\n",
      "├── checkpoint2.pt\n",
      "├── checkpoint_best.pt\n",
      "└── checkpoint_last.pt\n",
      "\n",
      "0 directories, 4 files\n"
     ]
    }
   ],
   "source": [
    "!tree ./data/mt-pt/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### So how the model is trained?\n",
    "\n",
    "If one can do some multiclass classification, the term `cross entropy` should be familiar and it's a kind of loss used to calculate how a probability distribution **p** is different from another **q** (or how p diverges from q or what is the relative entropy of p with respect to q).\n",
    "\n",
    "More concretely, the decoder takes a `<START>` token and the last hidden state of the encoder as input and calculate a probability distribution for the next word.\n",
    "\n",
    "Let's say the Spanish text is `María es hermosa.` A hidden state `x` is generated by the encoder and is feeded into the decoder with a `<START>` token since it's the first word. Then the model would compute a probability distribution for each word in the dictionary. Say there are 3 words in the dict: `Mary, a, b` . The probability calculated by the model would probably be `30%, 40%, 50%`. This is obviously wrong, so the model would try to adjust/learn the right distribution based on the difference between this distribution and the true distribution (cross entropy).\n",
    "\n",
    "It's important to note that for the word `es`, the model would calculate the probability distribution for candidate translations by assuming the previous word is `Mary`, regardless of the actual distribution. Otherwise it would be very difficult for the model to learn."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inference/translate\n",
    "\n",
    "The following script can be used to translate new sentences. Each new sentence occupies a new line in the file `source.txt` and the translations are redirected to `target.txt`. \n",
    "\n",
    "Since the decoder uses the output of the encoder to generate new texts, the model is called `conditional language model`. Also, it's a `auroregressive` model because it always generate text from left to right.\n",
    "\n",
    "```bash\n",
    "fairseq-interactive --input=source.txt \\\n",
    "data/mt-bin \\\n",
    "--path data/mt-pt/checkpoint_best.pt \\\n",
    "--beam 5 \\\n",
    "--source-lang es \\\n",
    "--target-lang en > target.txt\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is --beam?\n",
    "\n",
    "There are commonly two ways for the decoder (of translation model) to translate new sentences. Remember that contrary to the training period where the model knows the right translation, the decoder now doesn't know the right answer for new sentences.\n",
    "\n",
    "The `greedy decoding` makes a bold assumption: the quality of the whole translated sentence can be optimized by taking each time the word with the largest score. Let's say you want to translate the sentence `María es hermosa`. This means that at each step where a new word is to be translated, the model always select the word with the maximum possibility.\n",
    "\n",
    "Howeven, this local view can be non ideal. Sometimes you want to consider long-term benefits and it's exactly the case here because we want a overall good quality at the sentence level. This is the `Beam search decoding`.\n",
    "\n",
    "This kind of long-term thinking is prevalent in life. Let's say that you want to go from A to Z. The first possibility (A-B-C-Z) has the score (1-4-2-2) and the second option (A-D-E-Z) has the score (1-3-4-5). If you take the first itinerary, you are using the `greedy decoding` because `B` gives a better score than `D` (4>3). However, the second option gives a much higher total score (13>9)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We can't try out every possibility\n",
    "\n",
    "Since the total words in a dictionary is often huge and it is impossible to test each path possible (for each new word there are n possibilities). It is often necessary to make a compromise and choose a maximum option at each time step (word step for translation). Here we choose 5, meaning that at each new word we choose 5 possible words.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see the translations :) We use the interactive mode here because the input file is raw text. For binarized data, use `fairseq-generate`. See [here](https://fairseq.readthedocs.io/en/latest/getting_started.html).\n",
    "\n",
    "A line prefixed with O is a copy of the original source sentence; H is the hypothesis along with an average log-likelihood; D (same as H here), the detokenized hypothesis; and P is the positional score per token position, including the `end-of-sentence` marker which is omitted from the text. Since the translation of `Hola` is `Hi !`, there are 3 positional score for the whole sentence (+`end-of-sentence`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S-0\tHola\n",
      "W-0\t0.052\tseconds\n",
      "H-0\t-1.278975486755371\tHi !\n",
      "D-0\t-1.278975486755371\tHi !\n",
      "P-0\t-1.3579 -2.1726 -0.3064\n",
      "S-1\tMe llamo John\n",
      "W-1\t0.048\tseconds\n",
      "H-1\t-1.3514807224273682\tI &apos;m called John .\n",
      "D-1\t-1.3514807224273682\tI &apos;m called John .\n",
      "P-1\t-0.3346 -1.4456 -4.4575 -0.7365 -1.1340 -0.0007\n",
      "S-2\tEncantado de conocerte\n",
      "W-2\t0.061\tseconds\n",
      "H-2\t-1.2823961973190308\tTry to meet you again .\n",
      "D-2\t-1.2823961973190308\tTry to meet you again .\n",
      "P-2\t-3.4609 -0.1466 -1.5243 -0.2264 -3.3591 -0.2586 -0.0009\n",
      "S-3\tÚltimamente llueve mucho\n",
      "W-3\t0.060\tseconds\n",
      "H-3\t-1.3773524761199951\tIt &apos;s raining a lot of time .\n",
      "D-3\t-1.3773524761199951\tIt &apos;s raining a lot of time .\n",
      "P-3\t-2.1072 -1.2201 -0.8574 -2.9196 -0.7664 -0.1294 -3.8994 -0.4957 -0.0010\n"
     ]
    }
   ],
   "source": [
    "!cat target.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion, possible improvements and variations\n",
    "\n",
    "In this tutorial, we go through the whole process of training a NMT model. We use LSTM as building blocks for both the encoder and the decoder. We hope that you can see how simple it is to use `fairseq` for NMT tasks.\n",
    "\n",
    "Multiple improvements are however possible, mainly:\n",
    "\n",
    "1) Hyperparameter tuning.\n",
    "2) More bitexts.\n",
    "3) Using other architectures than LSTM-based single embedding approach.\n",
    "\n",
    "The third point is especially important. As we mentioned in the first section `RNN and its major downside`, it was usual to encode the whole sentence as a single vector despite the length. So the longer a sentence is, more information would be lost and more difficult it is to translate. For how this issue is tackled, see the following article:\n",
    "\n",
    "Bahdanau, D., Cho, K., & Bengio, Y. (2016). Neural Machine Translation by Jointly Learning to Align and Translate. ArXiv:1409.0473 [Cs, Stat]. http://arxiv.org/abs/1409.0473\n",
    "\n",
    "In fact, the `lstm` option used in `fairseq` implements already an attention mechanism (technically it's a form of cross-attention) because the latter is now a de facto standard in machine translation. Later we will see how to use `self-attention`, an architecture which has literally revolutionized the way to tackle most NLP tasks.\n",
    "\n",
    "Also, it is very common to rephrase some other NLP tasks as a translation problem, such as:\n",
    "\n",
    "1) Chatbot\n",
    "2) Question Answering\n",
    "3) Grammatical Error Correction\n",
    "\n",
    "We'll talk about these different perspectives in other tutorials using other architectures such as Transformer.\n",
    "\n",
    "Stay tuned :)"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "40d3a090f54c6569ab1632332b64b2c03c39dcf918b08424e98f38b5ae0af88f"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
